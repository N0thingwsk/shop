// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.1
// - protoc             v3.21.7
// source: goods/v1/goods.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGoodsGetGoodsList = "/api.goods.v1.Goods/GetGoodsList"

type GoodsHTTPServer interface {
	GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListReply, error)
}

func RegisterGoodsHTTPServer(s *http.Server, srv GoodsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/goods/getgoods", _Goods_GetGoodsList0_HTTP_Handler(srv))
}

func _Goods_GetGoodsList0_HTTP_Handler(srv GoodsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGoodsListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsGetGoodsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGoodsList(ctx, req.(*GetGoodsListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGoodsListReply)
		return ctx.Result(200, reply)
	}
}

type GoodsHTTPClient interface {
	GetGoodsList(ctx context.Context, req *GetGoodsListRequest, opts ...http.CallOption) (rsp *GetGoodsListReply, err error)
}

type GoodsHTTPClientImpl struct {
	cc *http.Client
}

func NewGoodsHTTPClient(client *http.Client) GoodsHTTPClient {
	return &GoodsHTTPClientImpl{client}
}

func (c *GoodsHTTPClientImpl) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...http.CallOption) (*GetGoodsListReply, error) {
	var out GetGoodsListReply
	pattern := "/v1/goods/getgoods"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGoodsGetGoodsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
