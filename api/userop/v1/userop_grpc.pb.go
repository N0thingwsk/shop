// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: userop/v1/userop.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UseropClient is the client API for Userop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UseropClient interface {
	CreateUserop(ctx context.Context, in *CreateUseropRequest, opts ...grpc.CallOption) (*CreateUseropReply, error)
	UpdateUserop(ctx context.Context, in *UpdateUseropRequest, opts ...grpc.CallOption) (*UpdateUseropReply, error)
	DeleteUserop(ctx context.Context, in *DeleteUseropRequest, opts ...grpc.CallOption) (*DeleteUseropReply, error)
	GetUserop(ctx context.Context, in *GetUseropRequest, opts ...grpc.CallOption) (*GetUseropReply, error)
	ListUserop(ctx context.Context, in *ListUseropRequest, opts ...grpc.CallOption) (*ListUseropReply, error)
}

type useropClient struct {
	cc grpc.ClientConnInterface
}

func NewUseropClient(cc grpc.ClientConnInterface) UseropClient {
	return &useropClient{cc}
}

func (c *useropClient) CreateUserop(ctx context.Context, in *CreateUseropRequest, opts ...grpc.CallOption) (*CreateUseropReply, error) {
	out := new(CreateUseropReply)
	err := c.cc.Invoke(ctx, "/api.userop.v1.Userop/CreateUserop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useropClient) UpdateUserop(ctx context.Context, in *UpdateUseropRequest, opts ...grpc.CallOption) (*UpdateUseropReply, error) {
	out := new(UpdateUseropReply)
	err := c.cc.Invoke(ctx, "/api.userop.v1.Userop/UpdateUserop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useropClient) DeleteUserop(ctx context.Context, in *DeleteUseropRequest, opts ...grpc.CallOption) (*DeleteUseropReply, error) {
	out := new(DeleteUseropReply)
	err := c.cc.Invoke(ctx, "/api.userop.v1.Userop/DeleteUserop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useropClient) GetUserop(ctx context.Context, in *GetUseropRequest, opts ...grpc.CallOption) (*GetUseropReply, error) {
	out := new(GetUseropReply)
	err := c.cc.Invoke(ctx, "/api.userop.v1.Userop/GetUserop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useropClient) ListUserop(ctx context.Context, in *ListUseropRequest, opts ...grpc.CallOption) (*ListUseropReply, error) {
	out := new(ListUseropReply)
	err := c.cc.Invoke(ctx, "/api.userop.v1.Userop/ListUserop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UseropServer is the server API for Userop service.
// All implementations must embed UnimplementedUseropServer
// for forward compatibility
type UseropServer interface {
	CreateUserop(context.Context, *CreateUseropRequest) (*CreateUseropReply, error)
	UpdateUserop(context.Context, *UpdateUseropRequest) (*UpdateUseropReply, error)
	DeleteUserop(context.Context, *DeleteUseropRequest) (*DeleteUseropReply, error)
	GetUserop(context.Context, *GetUseropRequest) (*GetUseropReply, error)
	ListUserop(context.Context, *ListUseropRequest) (*ListUseropReply, error)
	mustEmbedUnimplementedUseropServer()
}

// UnimplementedUseropServer must be embedded to have forward compatible implementations.
type UnimplementedUseropServer struct {
}

func (UnimplementedUseropServer) CreateUserop(context.Context, *CreateUseropRequest) (*CreateUseropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserop not implemented")
}
func (UnimplementedUseropServer) UpdateUserop(context.Context, *UpdateUseropRequest) (*UpdateUseropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserop not implemented")
}
func (UnimplementedUseropServer) DeleteUserop(context.Context, *DeleteUseropRequest) (*DeleteUseropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserop not implemented")
}
func (UnimplementedUseropServer) GetUserop(context.Context, *GetUseropRequest) (*GetUseropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserop not implemented")
}
func (UnimplementedUseropServer) ListUserop(context.Context, *ListUseropRequest) (*ListUseropReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserop not implemented")
}
func (UnimplementedUseropServer) mustEmbedUnimplementedUseropServer() {}

// UnsafeUseropServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UseropServer will
// result in compilation errors.
type UnsafeUseropServer interface {
	mustEmbedUnimplementedUseropServer()
}

func RegisterUseropServer(s grpc.ServiceRegistrar, srv UseropServer) {
	s.RegisterService(&Userop_ServiceDesc, srv)
}

func _Userop_CreateUserop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUseropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseropServer).CreateUserop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userop.v1.Userop/CreateUserop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseropServer).CreateUserop(ctx, req.(*CreateUseropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userop_UpdateUserop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUseropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseropServer).UpdateUserop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userop.v1.Userop/UpdateUserop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseropServer).UpdateUserop(ctx, req.(*UpdateUseropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userop_DeleteUserop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUseropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseropServer).DeleteUserop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userop.v1.Userop/DeleteUserop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseropServer).DeleteUserop(ctx, req.(*DeleteUseropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userop_GetUserop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUseropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseropServer).GetUserop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userop.v1.Userop/GetUserop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseropServer).GetUserop(ctx, req.(*GetUseropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userop_ListUserop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUseropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseropServer).ListUserop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.userop.v1.Userop/ListUserop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseropServer).ListUserop(ctx, req.(*ListUseropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Userop_ServiceDesc is the grpc.ServiceDesc for Userop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.userop.v1.Userop",
	HandlerType: (*UseropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserop",
			Handler:    _Userop_CreateUserop_Handler,
		},
		{
			MethodName: "UpdateUserop",
			Handler:    _Userop_UpdateUserop_Handler,
		},
		{
			MethodName: "DeleteUserop",
			Handler:    _Userop_DeleteUserop_Handler,
		},
		{
			MethodName: "GetUserop",
			Handler:    _Userop_GetUserop_Handler,
		},
		{
			MethodName: "ListUserop",
			Handler:    _Userop_ListUserop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userop/v1/userop.proto",
}
